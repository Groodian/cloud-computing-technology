image: registry.code.fbi.h-da.de/cloud-computing-technology/2022_wise/group_a_2:latest
variables:
  TF_ROOT: ${CI_PROJECT_DIR}
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_PROJECT_NAME}

cache:
  key: terraform-cache
  paths:
    - ${TF_ROOT}/.terraform
    - ${TF_ROOT}/.terraform.lock.hcl
  when: always

before_script:
  - cd ${TF_ROOT}

stages:
  - init
  - validate
  - plan
  - apply
  - destroy

init:
  stage: init
  script:
    - gitlab-terraform init
  artifacts:
    name: init
    paths:
    - ${TF_ROOT}/.terraform
    - ${TF_ROOT}/.terraform.lock.hcl

validate:
  stage: validate
  script:
    - gitlab-terraform validate
  dependencies:
    - init

plan:
  stage: plan
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json
  dependencies:
    - init

# Separate apply job for manual launching Terraform as it can be destructive
# action.
apply:
  stage: apply
  environment:
    name: production
  script:
    - gitlab-terraform -version
    - ansible --version
    - ansible-playbook --version
    - chmod -R 700 .
    - gitlab-terraform apply
  dependencies:
    - init
    - plan
  when: manual

destroy:
  stage: destroy
  environment:
    name: production
  script:
    - gitlab-terraform destroy
  dependencies:
    - init
  when: manual
