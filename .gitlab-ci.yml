build_image:
  stage: build_image
  services:
    - docker:dind
  image: docker:latest
  tags:
    - docker
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull --cache-from $CI_REGISTRY_IMAGE:latest -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  # Run this job in a branch where a Dockerfile has changed
  only:
    changes:
      - Dockerfile

image: $CI_REGISTRY_IMAGE
variables:
  TF_ROOT: ${CI_PROJECT_DIR}

cache:
  key: terraform-cache
  paths:
    - ${TF_ROOT}/.terraform
    - ${TF_ROOT}/.terraform.lock.hcl
    - ${TF_ROOT}/terraform.tfstate
    - ${TF_ROOT}/terraform.tfstate.backup
    - ${TF_ROOT}/.ssh
    - ${TF_ROOT}/ansible/inventory
  when: always

before_script:
  - cd ${TF_ROOT}

stages:
  - build_image
  - prepare
  - validate
  - build
  - deploy
  - destroy

init:
  stage: prepare
  script:
    - terraform init

validate:
  stage: validate
  script:
    - terraform init
    - terraform validate

plan:
  stage: build
  script:
    - terraform plan
    - terraform plan-json
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

apply:
  stage: deploy
  environment:
    name: production
  script:
    - terraform apply
  dependencies:
    - plan
  when: manual

destroy:
  stage: destroy
  environment:
    name: production
  script:
    - terraform destroy
  when: manual
